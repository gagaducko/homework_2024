package main

//
// a grep application "plugin" for MapReduce.
//
// go build -buildmode=plugin mygrep.go
//

import (
	"6.5840/mr"
	"regexp"
	"strings"
)

// The grep function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. The return value is a slice
// of key/value pairs.
func Map(filename string, contents string) []mr.KeyValue {
	// 为了方便测试，指定模式串为'happy'
	REGSTR := `happy`
	// 初始化一个结果切片
	var result []mr.KeyValue
	// 创建一个正则表达式模式
	re := regexp.MustCompile(REGSTR)
	// 逐行对文件内容进行扫描
	lines := strings.Split(contents, "\n")
	for _, line := range lines {
		// 如果正则表达式匹配到，则将该行添加到结果切片中
		if re.MatchString(line) {
			result = append(result, mr.KeyValue{filename, line})
		}
	}
	return result
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func Reduce(key string, values []string) string {
	// Your code here.
	// 讲所有匹配的行连接成一个大字符串，用换行符来分割
	return strings.Join(values, "\n")
}
